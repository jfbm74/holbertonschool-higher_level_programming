The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
====================

Importing the function from the module:
``matrix_divided`` from the ``2-matrix_divided`` module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Checking for module docstring:
	 >>> m = __import__("2-matrix_divided").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("2-matrix_divided").matrix_divided.__doc__
         >>> len(f) > 1
         True

REGULAR CASES
=============
Checking main case:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Checking for case: [[3]] / 3
    >>> matrix_divided([[3]], 3)
    [[1.0]]

Checking for case: [[3, 9], [12, 15]] / -3
    >>> matrix_divided([[3, 9], [12, 15]], -3)
    [[-1.0, -3.0], [-4.0, -5.0]]

Checking for case: case: [[3, 9], [12, 15]] / 0 => ZeroDivisionError: division by zero
    >>> matrix_divided([[3, 9], [12, 15]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero


Checking for case: case: [[3, 9], [12, 15, 3]] / 3 => TypeError: matrix must have each row with the same size
    >>> matrix_divided([[3, 9], [12, 15, 3]], 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size



Checking for case:


