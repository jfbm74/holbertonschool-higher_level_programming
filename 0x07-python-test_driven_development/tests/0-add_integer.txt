The ``0-add_integer`` module
======================

Using ``add_integer``
====================

Importing the function from the module:
``add_integer`` from the ``0-add_integer`` module:
    >>> add_integer = __import__('0-add_integer').add_integer

Checking for module docstring:
	 >>> m = __import__("0-add_integer").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("0-add_integer").add_integer.__doc__
         >>> len(f) > 1
         True

REGULAR SUM
===========
Checking sum for 2 positive integer:
    >>> add_integer(1, 2)
    3

Checking sum for 1 positive and negative integers:
    >>> add_integer(1, -2)
    -1

Checking sum for 1 positive float and 1 positive integer;
    >>> add_integer(1.4, 2)
    3

EXCEPTION CASES
==========
Checking sum for 1 integer and string:
    >>> add_integer(1, "2")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Checking for passed inf:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer

Checking for passed inf:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Checking for no argument:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Checking for 1 missing argument:
    >>> add_integer(1)
    99
